import {useEffect, useRef, useState} from 'react';
import {cc} from "../common/variables";
import Image from "next/image";
var layoutGeometry = require('justified-layout');


function MyImageGallery(options) {
    handleErrorChecking(options);

    const galleryElementRef = useRef(null);
    const [galleryElements, setGalleryElements] = useState(null);

    const optionsWithDefaults = addDefaultsToOptions(options);
    const {containerPadding, containerWidth, targetRowHeight, justifyFinalRow, imagePadding, maxRows, showIncompleteRows} = {...optionsWithDefaults};

    useEffect(() => {
        const galleryContainer = document.querySelector(".njGallery");
        setGalleryElements(calculateGalleryLayout(optionsWithDefaults, galleryContainer));

        window.addEventListener('resize', () => setGalleryElements(calculateGalleryLayout(optionsWithDefaults, galleryContainer)));
        return () => {
            window.removeEventListener('resize', () => setGalleryElements(calculateGalleryLayout(optionsWithDefaults, galleryContainer)));
        }
    }, []);

    return (
        <>
            <div className={"njGallery"}
                style={
                    {
                    "width": (containerWidth),
                    "display": "flex",
                    "flexWrap": "wrap",
                    "padding": (containerPadding/2) + "px " + (containerPadding/2) + "px " + (containerPadding/2) + "px " + (containerPadding/2) + "px",
                    }
                }
                ref={galleryElementRef}
            >
                {galleryElements}
            </div>
        </>
    );
}

function calculateGalleryLayout(calculatoroptions, galleryContainer){
    const optionsCopy = {...calculatoroptions}

    const {
        containerPadding,
        containerWidth,
        targetRowHeight,
        imagePadding,
        maxRows,
        showIncompleteRows,
    } = optionsCopy;


    const autoGeneratedWidth = Math.trunc(+galleryContainer.offsetWidth-1); // -1 because otherwise at some widths, the last image in a row jumps to the next row. Total width might be e.g. 0.42 pixels too large.
    const imageLayout = layoutGeometry(
        [
            {width: 200, height: 300},
            {width: 150, height: 300},
            {width: 300, height: 300},
            {width: 250, height: 250},
        ], {
            containerWidth: containerWidth | autoGeneratedWidth,
            targetRowHeight: targetRowHeight | 300,
            containerPadding: containerPadding,
            boxSpacing: imagePadding,
            maxNumRows: maxRows,
            showWidows: showIncompleteRows,
        }
    );

    return imageLayout.boxes.map((e, k) => {
        e.height = Math.trunc(+e.height);
        e.width = Math.trunc(+e.width);

        return (
            <Image
                style={
                    {
                    "height": e.height,
                    "width": e.width,
                    "margin": (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px " + (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px",
                    }
                }
                src={ "http://localhost:3001/temp/162A2061.jpg" }
                blurDataURL={"http://localhost:3001/leaflet/base64_thumbnails/macro/162A2078.jpg"}
                placeholder={"blur"}
                key={k}
                className={"njGalleryImage"}
                width={e.width}
                height={e.height}
            />
        );
    });
}

function handleErrorChecking(options){
    const optionsCopy = {...options}
    const {padding} = optionsCopy;

    if (padding && padding % 2 !== 0) throw new Error("Padding must be an even number");
}

function addDefaultsToOptions(options){
    const optionsCopy = {...options}

    return {
        containerPadding: optionsCopy.containerPadding || 10,
        containerWidth: optionsCopy.containerWidth || "100%",
        targetRowHeight: optionsCopy.containerWidth || "300px",
        justifyFinalRow: optionsCopy.justifyFinalRow || false,
        imagePadding: optionsCopy.imagePadding || {vertical: 10, horizontal: 10},
        maxRows: optionsCopy.hideIncompleteRows || Number.POSITIVE_INFINITY,
        showIncompleteRows: optionsCopy.maxRows || true,
    }
}

export default MyImageGallery;
