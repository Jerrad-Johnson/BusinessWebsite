import React, {Component, useEffect, useState} from 'react';
import {cc} from "../common/variables";
import gallery from "../pages/gallery";
var layoutGeometry = require('justified-layout');





function MyImageGallery({
            padding = 10,
            userDefinedContainerWidth = undefined,
            userDefinedTargetRowHeight = undefined,
         }) {

    if (padding % 2 !== 0) throw new Error("Padding must be an even number");

    const [galleryElements, setGalleryElements] = useState((<></>));

    if (typeof document !== "undefined") {
        const galleryContainer = document.querySelector(".testingGallery");
        const autoGeneratedWidth = galleryContainer.offsetWidth;

        const result = layoutGeometry(
            [
                {width: 200, height: 300},
                {width: 150, height: 300},
                {width: 300, height: 300},
                {width: 250, height: 250},
            ], {
                containerWidth: userDefinedContainerWidth | autoGeneratedWidth,
                targetRowHeight: userDefinedTargetRowHeight | 200,
            }
        );

        cc(result);

        const galleryLayout = result.boxes.map((e, k) => {
            e.height = Math.trunc(+e.height);
            e.width = Math.trunc(+e.width);
            return (
              <img
                style={{
                  "height": e.height,
                  "width": e.width,
                }}
                src={"http://localhost:3001/leaflet/thumbnails/macro/162A2078.jpg"}
                key={k}
                className={"njGalleryImage"}
              >

              </img>
            );
        });

        useEffect(() => {
           setGalleryElements(galleryLayout);
        }, []);
    }

    return (
        <>
            <div className={"testingGallery"} style={{
                "paddingTop": (padding / 2),
                "paddingBottom": (padding /2),
            }}>
                {galleryElements}
            </div>
        </>
    );
}

export default MyImageGallery;
