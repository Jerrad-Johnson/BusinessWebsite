import {useEffect, useRef, useState} from 'react';
import {cc} from "../common/variables";
import Image from "next/image";
var layoutGeometry = require('justified-layout');


function MyImageGallery(options) {
    handleErrorChecking(options);

    const galleryElementRef = useRef(null);
    const [galleryElements, setGalleryElements] = useState(null);

    const optionsWithDefaults = addDefaultsToOptions(options);
    const {containerPadding, containerWidth, targetRowHeight, justifyFinalRow, imagePadding, maxRows, showIncompleteRows, images} = {...optionsWithDefaults};

        useEffect(() => {
            setGalleryElements(calculateGalleryLayout(optionsWithDefaults, galleryElementRef));

            window.addEventListener('resize', () => setGalleryElements(calculateGalleryLayout(optionsWithDefaults, galleryElementRef)));
            return () => {
                window.removeEventListener('resize', () => setGalleryElements(calculateGalleryLayout(optionsWithDefaults, galleryElementRef)));
            }
        }, []);

    return (
            <div className={"njGallery"}
                style={
                    {
                    "width": (containerWidth),
                    "display": "flex",
                    "flexWrap": "wrap",
                    "padding": (containerPadding/2) + "px " + (containerPadding/2) + "px " + (containerPadding/2) + "px " + (containerPadding/2) + "px",
                    }
                }
                ref={galleryElementRef && galleryElementRef}
            >
                {galleryElements && galleryElements}
            </div>
    );
}

function calculateGalleryLayout(calculatoroptions, galleryContainer){
    galleryContainer = galleryContainer.current;
    const optionsCopy = {...calculatoroptions}

    const {
        images,
        containerPadding,
        containerWidth,
        targetRowHeight,
        imagePadding,
        maxRows,
        showIncompleteRows,
    } = optionsCopy;

    const imageDimensions = images.map((e, k) => {
        return {width: e.width, height: e.height}
    });



    const autoGeneratedWidth = Math.trunc(+galleryContainer.offsetWidth-1); // -1 because otherwise at some widths, the last image in a row jumps to the next row. Total width might be e.g. 0.42 pixels too large.
    const imageLayout = layoutGeometry(imageDimensions, {
            containerWidth: containerWidth | autoGeneratedWidth,
            targetRowHeight: targetRowHeight | 300,
            containerPadding: containerPadding,
            boxSpacing: imagePadding,
            maxNumRows: maxRows,
            showWidows: showIncompleteRows,
        }
    );

    const imageDetails = images;
    let imageLayoutAndOptions = [];
    for (let i = 0; i < imageLayout.boxes.length; i++){
        imageLayoutAndOptions[i] = {};
        imageLayoutAndOptions[i].boxHeight = imageLayout.boxes[i].height;
        imageLayoutAndOptions[i].boxWidth = imageLayout.boxes[i].width;
        imageLayoutAndOptions[i].imgSrc = imageDetails[i].src;
        imageLayoutAndOptions[i].imgBlurSrc = imageDetails[i].blurSrc;
        imageLayoutAndOptions[i].alt = imageDetails[i].alt;
    }

    return imageLayoutAndOptions.map((e, k) => {
        e.height = Math.trunc(+e.boxHeight);
        e.width = Math.trunc(+e.boxWidth);

        return (
            <div style={
                    {
                    "margin": (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px " + (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px",
                    }
                }
                key={k}
            >
                <Image
                    src={e.imgSrc}
                    blurDataURL={e.imgBlurSrc}
                    placeholder={e.imgBlurSrc && "blur"}
                    className={"njGalleryImage"}
                    width={e.boxWidth}
                    height={e.boxHeight}
                    alt={e.alt}
                />
            </div>
        );
    });
}

function handleErrorChecking(options){
    const optionsCopy = {...options}
    const {padding, images} = optionsCopy;

    if (!images) throw new Error("You must include images.");
    if (padding && padding % 2 !== 0) throw new Error("Padding must be an even number");
}

function addDefaultsToOptions(options){
    const optionsCopy = {...options}

    return {
        images: optionsCopy.images,
        containerPadding: optionsCopy.containerPadding || 10,
        containerWidth: optionsCopy.containerWidth || "100%",
        targetRowHeight: optionsCopy.containerWidth || "300px",
        justifyFinalRow: optionsCopy.justifyFinalRow || false,
        imagePadding: optionsCopy.imagePadding || {vertical: 10, horizontal: 10},
        maxRows: optionsCopy.hideIncompleteRows || Number.POSITIVE_INFINITY,
        showIncompleteRows: optionsCopy.maxRows || true,
    }
}

export default MyImageGallery;
