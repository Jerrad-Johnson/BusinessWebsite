import {useEffect, useState} from 'react';
import {cc} from "../common/variables";
var layoutGeometry = require('justified-layout');


function MyImageGallery(inputs) {
    const delinkedInputsForErrorChecker = delinkObject(inputs);
    handleErrorChecking(delinkedInputsForErrorChecker);

    const [galleryElements, setGalleryElements] = useState((<></>));

    const delinkedInputs = delinkObject(inputs);
    const containerPadding = delinkedInputs.containerPadding || 10;
    const containerWidth = delinkedInputs.containerWidth || undefined;
    const targetRowHeight = delinkedInputs.containerWidth || undefined;
    const justifyFinalRow = delinkedInputs.justifyFinalRow || undefined;
    const imagePadding = delinkedInputs.imagePadding || {vertical: 10, horizontal: 10};
    const maxNumRows = delinkedInputs.maxRows || Number.POSITIVE_INFINITY;
    const showIncompleteRows = delinkedInputs.hideIncompleteRows || true;

    const calculatorInputs = {
        containerPadding,
        containerWidth,
        targetRowHeight,
        justifyFinalRow,
        imagePadding,
        showIncompleteRows,
    }

    useEffect(() => {
        const galleryContainer = document.querySelector(".njGallery");
        setGalleryElements(calculateGalleryLayout(calculatorInputs, galleryContainer));

        window.addEventListener('resize', () => setGalleryElements(calculateGalleryLayout(calculatorInputs, galleryContainer)));
        return () => {
            window.removeEventListener('resize', () => setGalleryElements(calculateGalleryLayout(calculatorInputs, galleryContainer)));
        }
    }, []);

    return (
        <>
            <div className={"njGallery"} style={{
                "width": (containerWidth),
                "display": "flex",
                "flex-wrap": "wrap",
                "padding": (containerPadding/2) + "px " + (containerPadding/2) + "px " + (containerPadding/2) + "px " + (containerPadding/2) + "px",
            }}>
                {galleryElements}
            </div>
        </>
    );
}


function calculateGalleryLayout(calculatorInputs, galleryContainer){
    const delinkCalculatorInputs = delinkObject(calculatorInputs)

    const {
        containerPadding,
        containerWidth,
        targetRowHeight,
        imagePadding,
        maxRows,
        showIncompleteRows,
    } = delinkCalculatorInputs;

    const autoGeneratedWidth = Math.trunc(+galleryContainer.offsetWidth-1); // -1 because otherwise at some widths, the last image in a row jumps to the next row. Total width might be e.g. 0.42 pixels too large.
    cc(autoGeneratedWidth)
    const imageLayout = layoutGeometry(
        [
            {width: 200, height: 300},
            {width: 150, height: 300},
            {width: 300, height: 300},
            {width: 250, height: 250},
        ], {
            containerWidth: containerWidth | autoGeneratedWidth,
            targetRowHeight: targetRowHeight | 300,
            containerPadding: containerPadding,
            boxSpacing: imagePadding,
            maxNumRows: maxRows,
            showIncompleteRows: showIncompleteRows,
        }
    );

    return imageLayout.boxes.map((e, k) => {
        e.height = Math.trunc(+e.height);
        e.width = Math.trunc(+e.width);

        return (
            <img
                style={{
                    "height": e.height,
                    "width": e.width,
                    "margin": (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px " + (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px",
                }}
                src={"http://localhost:3001/leaflet/thumbnails/macro/162A2078.jpg"}
                key={k}
                className={"njGalleryImage"}
            />
        );
    });
}

function handleErrorChecking(inputs){
    const {padding} = inputs;

    if (padding && padding % 2 !== 0) throw new Error("Padding must be an even number");
}

function delinkObject(data){
    return JSON.parse(JSON.stringify(data));
}

export default MyImageGallery;
