import Image from "next/image";
const layoutGeometry = require('../justified-layout');

export function createGalleryLayout(galleryInputWithDefaults, galleryElementRef){
    const galleryInputCopy = {...galleryInputWithDefaults}
    const {images, imagePadding} = galleryInputCopy;
    const imageLayout = calculateGalleryLayout(galleryInputCopy, galleryElementRef);
    const reformattedImageData = reformatGalleryData(imageLayout, images);

    return reformattedImageData.map((e, k) => {
        e.height = Math.trunc(+e.boxHeight);
        e.width = Math.trunc(+e.boxWidth);

        return (
                <div
                    style={{ "margin": (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px " + (imagePadding.vertical/2) + "px " + (imagePadding.horizontal/2) + "px", }}
            key={k}
            >
            <Image
                src={e.imgSrc}
            blurDataURL={e.imgBlurSrc}
            placeholder={e.imgBlurSrc && "blur"}
            className={"njGalleryImage"}
            width={e.boxWidth}
            height={e.boxHeight}
            alt={e.alt}
            />
            </div>
        );
    });
}

export function calculateGalleryLayout(galleryInputCopy, galleryElementRef){
    const { images, containerPadding, targetRowHeight, imagePadding, maxRows, showIncompleteRows, targetRowHeightTolerance } = galleryInputCopy;

    const imageDimensions = images.map((e) => {
        return {width: e.width, height: e.height}
    });

    const elementMinimumPadding = containerPadding;
    let galleryElementWidth;
    galleryElementRef?.current?.offsetWidth ? galleryElementWidth = galleryElementRef?.current?.offsetWidth-4 : galleryElementWidth = 14; // -4 because otherwise at some widths, the last image in a row jumps to the next row. Total width might be e.g. 0.42 pixels too large.
    if ((galleryElementWidth - elementMinimumPadding) < 14) galleryElementWidth = 14 + elementMinimumPadding;

    const autoGeneratedWidth = Math.trunc(galleryElementWidth);
    const imageLayout = layoutGeometry(imageDimensions, {
            containerWidth: autoGeneratedWidth,
            targetRowHeight: targetRowHeight || 300,
            containerPadding: containerPadding,
            boxSpacing: imagePadding,
            maxNumRows: maxRows,
            showWidows: showIncompleteRows,
            targetRowHeightTolerance: targetRowHeightTolerance,
            edgeCaseMinRowHeight: 80,
        }
    );

    return imageLayout;
}

export function reformatGalleryData(imageLayout, images){
    const imagesCopy = [...images];
    let reformattedImageData = [];

    for (let i = 0; i < imageLayout.boxes.length; i++){
        reformattedImageData[i] = {};
        reformattedImageData[i].boxHeight = imageLayout.boxes[i].height;
        reformattedImageData[i].boxWidth = imageLayout.boxes[i].width;
        reformattedImageData[i].imgSrc = imagesCopy[i].src;
        reformattedImageData[i].imgBlurSrc = imagesCopy[i].blurSrc;
        reformattedImageData[i].alt = imagesCopy[i].alt;
    }

    return reformattedImageData;
}
